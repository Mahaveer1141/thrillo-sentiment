generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model entities {
  id           BigInt         @id @default(autoincrement())
  score        Decimal        @db.Decimal
  magnitude    Decimal        @db.Decimal
  entity       entity_type
  name         String         @db.VarChar(255)
  sentiment    sentiment_type
  sentiment_id BigInt
  created_at   DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  updated_at   DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  sentiments   sentiments     @relation(fields: [sentiment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reviews {
  id           BigInt     @id @default(autoincrement())
  rating       Decimal    @db.Decimal
  content      String
  customer_id  BigInt
  product_id   BigInt
  sentiment_id BigInt
  created_at   DateTime?  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  updated_at   DateTime?  @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  customer     customers  @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product      products   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sentiments   sentiments @relation(fields: [sentiment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model customers {
  id         BigInt    @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  updated_at DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  reviews    reviews[]
}

model products {
  id           BigInt    @id @default(autoincrement())
  name         String    @db.VarChar(255)
  slug         String    @db.VarChar(255)
  product_type String    @db.VarChar(255)
  location     String    @db.VarChar(255)
  created_at   DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  updated_at   DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  reviews      reviews[]
}

model sentiments {
  id         BigInt         @id @default(autoincrement())
  score      Decimal        @db.Decimal
  magnitude  Decimal        @db.Decimal
  sentiment  sentiment_type
  created_at DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  updated_at DateTime?      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  entities   entities[]
  reviews    reviews[]
  sentences  sentences[]
}

model sentences {
  id           BigInt         @id @default(autoincrement())
  content      String
  score        Decimal        @db.Decimal
  magnitude    Decimal        @db.Decimal
  sentiment_id BigInt?
  sentiment    sentiment_type
  sentiments   sentiments?    @relation(fields: [sentiment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum entity_type {
  PERSON
  LOCATION
  ORGANIZATION
  EVENT
  WORK_OF_ART
  CONSUMER_GOOD
  OTHER
  PHONE_NUMBER
  ADDRESS
  DATE
  NUMBER
  PRICE
  UNKNOWN
}

enum sentiment_type {
  clearly_positive @map("clearly positive")
  clearly_negative @map("clearly negative")
  neutral
  mixed
  positive
  negative
}
